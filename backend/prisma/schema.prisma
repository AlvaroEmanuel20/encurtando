// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  avatarUrl         String?            @unique
  isVerified        Boolean            @default(false)
  shortUrls         ShortUrl[]
  invalidTokens     InvalidToken[]
  qrCodeConfig      QrCodeConfig?
  verificationToken VerificationToken?
  resetPassToken    ResetPassToken?
}

model QrCodeConfig {
  configId String  @id @default(uuid())
  color    String? @default("#000")
  size     Int?    @default(180)
  logo     String?
  user     User    @relation(fields: [userId], references: [userId])
  userId   String  @unique
}

model ShortUrl {
  shortId     String   @id
  originalUrl String
  title       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [userId])
  createdAt   DateTime @default(now())
  clicks      Click[]
}

model Click {
  clickId   String   @id @default(uuid())
  source    String?
  isQrCode  Boolean  @default(false)
  createdAt DateTime @default(now())
  shortUrl  ShortUrl @relation(fields: [shortId], references: [shortId])
  shortId   String
}

model InvalidToken {
  token  String @id //JWT token
  userId String
  user   User   @relation(fields: [userId], references: [userId])
}

model VerificationToken {
  token  String   @id @default(uuid())
  exp    DateTime
  userId String   @unique
  user   User     @relation(fields: [userId], references: [userId])
}

model ResetPassToken {
  token  String   @id @default(uuid())
  exp    DateTime
  userId String   @unique
  user   User     @relation(fields: [userId], references: [userId])
}
